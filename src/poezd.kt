import kotlin.random.Random

// –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –≤–∞–≥–æ–Ω–∞
class Wagon(val number: Int) {
    val capacity = Random.nextInt(1, 26) //
    var passengers = 0

    fun canAddMore(): Boolean = passengers < capacity
    fun addPassenger() { passengers++ }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã
class SimpleTrainPlanner {
    private val cities = listOf("–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–û–º—Å–∫", "–°–∞–º–∞—Ä–∞", "–†–æ—Å—Ç–æ–≤",
        "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–í–æ—Ä–æ–Ω–µ–∂", "–ü–µ—Ä–º—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥")

    fun start() {
        println("–ü–†–û–ì–†–ê–ú–ú–ê –°–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ü–û–ï–ó–î–û–í")

        while (true) {
            println("\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            print("–í–≤–µ–¥–∏—Ç–µ 1 - —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥, EXIT - –≤—ã—Ö–æ–¥: ")

            when (readLine()?.uppercase()) {
                "1" -> makeTrain()
                "EXIT" -> break
                else -> println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ EXIT")
            }
        }
        println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    }

    private fun makeTrain() {
        println("\n--- –®–ê–ì 1: –°–û–ó–î–ê–ï–ú –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï ---")
        val route = createRoute()
        println("–ú–∞—Ä—à—Ä—É—Ç: $route")

        println("\n--- –®–ê–ì 2: –ü–†–û–î–ê–ï–ú –ë–ò–õ–ï–¢–´ ---")
        val ticketCount = Random.nextInt(1, 202)
        println("–ü—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤: $ticketCount")

        println("\n--- –®–ê–ì 3: –§–û–†–ú–ò–†–£–ï–ú –ü–û–ï–ó–î ---")
        val wagons = createWagons(ticketCount)
        println("–°–æ–∑–¥–∞–Ω–æ –≤–∞–≥–æ–Ω–æ–≤: ${wagons.size}")

        println("\n--- –®–ê–ì 4: –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–û–ï–ó–î ---")
        sendTrain(route, wagons, ticketCount)
    }

    private fun createRoute(): String {
        var from = cities.random()
        var to = cities.random()
        while (from == to) {
            to = cities.random()
        }
        return "$from ‚Üí $to"
    }

    private fun createWagons(passengers: Int): List<Wagon> {
        val wagons = mutableListOf<Wagon>()
        var remainingPassengers = passengers
        var wagonNumber = 1

        while (remainingPassengers > 0) {
            val wagon = Wagon(wagonNumber)
            val seatsInWagon = minOf(remainingPassengers, wagon.capacity)

            repeat(seatsInWagon) {
                wagon.addPassenger()
            }

            wagons.add(wagon)
            remainingPassengers -= seatsInWagon
            wagonNumber++
        }

        return wagons
    }

    private fun sendTrain(route: String, wagons: List<Wagon>, totalPassengers: Int) {
        println("üöÇ –ü–æ–µ–∑–¥ \"$route\" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        println("   ‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: $totalPassengers")
        println("   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤: ${wagons.size}")
        println("   ‚Ä¢ –î–µ—Ç–∞–ª–∏ –ø–æ –≤–∞–≥–æ–Ω–∞–º:")

        wagons.forEach { wagon ->
            println("     –í–∞–≥–æ–Ω ${wagon.number}: –º–µ—Å—Ç ${wagon.capacity}, –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ ${wagon.passengers}")
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
fun main() {
    SimpleTrainPlanner().start()
}